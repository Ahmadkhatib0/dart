Dart strings are a collection of UTF-16 code units. UTF-16 is a way to encode Unicode values by using 16-bit
numbers. If you want to find out what those UTF-16 codes are, you can do it like so:
var salutation = 'Hello!';
print(salutation.codeUnits); // [72, 101, 108, 108, 111, 33]  (list of numbers in decimal notation)

These UTF-16 code units have the same value as Unicode code points for most of the characters you see on a day to
day basis. However, 16 bits only give you 65,536 combinations, and believe it or not, there are more than
65,536 characters in the world! Remember the large numbers that the emojis had in the last section? Youâ€™ll need more
than 16 bits to represent those values.  UTF-16 has a special way of encoding code points higher
than 65,536 by using two code units called SURROGATE PAIRS: 
const dart = 'ðŸŽ¯';
print(dart.codeUnits); // [55356, 57263]

The code point for ðŸŽ¯ is 127919, but the surrogate pair for that in UTF-16 is 55356 and 57263. No one wants to mess
with surrogate pairs. It would be much nicer to just get Unicode code points directly. And you can! Dart calls them
RUNES:  print(dart.runes); // (127919)

Unicode grapheme clusters
Unfortunately, language is messy and so is Unicode. Have a look at this example:
const flag = ' ';  // (this here is the Mongolia flag ) 
print(flag.runes); // (127474, 127475)
Why are there two Unicode code points!? Well, itâ€™s because Unicode doesnâ€™t create a new code point every time 
there is a new country flag. It uses a pair of code points called regional indicator symbols to represent a 
flag. Thatâ€™s what you see in the example for the Mongolian flag above. 127474 is the code for the regional 
indicator symbol letter M, and 127475 is the code for the regional indicator symbol letter N. MN represents Mongolia

const family = ' ';  (this here is an emoji that represents a family) 
print(family.runes); // (128104, 8205, 128105, 8205, 128103, 8205, 128102)

That list of Unicode code points is a man, a woman, a girl and a boy all glued together with 
a characters called a Zero Width Joiner or ZWJ. Now image trying to find the length of that string:
family.length; // 11
family.codeUnits.length; // 11
family.runes.length; // 7

Getting the length of the string with family.length is equivalent to finding the number of UTF-16 code units:
There are surrogate pairs for each of the four people plus the three ZWJ characters for a total of 11. 
Finding the runes gives you the seven Unicode code points that make up the emoji: 
man + ZWJ + woman + ZWJ + girl + ZWJ + boy.  However, neither 11 nor 7 is what youâ€™d expect. The family
emoji looks like itâ€™s just one character. Youâ€™d think the length should be one!
When a string with multiple code points looks like a single character, this is known as a user perceived character. 
In technical terms itâ€™s called a Unicode extended grapheme cluster, or more commonly, just grapheme cluster

****************************************** characters package **********************************************
import 'package:characters/characters.dart';
const family = ' ';
family.characters.length; // 1
so just one character for the family emoji. The characters package extended
String to include a collection of grapheme clusters called characters
you can decide whether you want to work with UTF-16 code units, Unicode code points or grapheme clusters. 
However, as A GENERAL RULE, you should strongly consider using grapheme clusters any time youâ€™re receiving text 
input from the outside world. That includes fetching data over the network or users typing things into your app

Key points
Unicode is the standard representation for mapping characters to numbers.
Dart uses UTF-16 values known as code units to encode Unicode strings.
A single mapping in Unicode is called a code point, which is known as a rune in Dart.
User-perceived characters may be composed of one or more code points and are called grapheme characters.
